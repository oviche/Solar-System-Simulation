#version 330 core
uniform mat4 MVP;
uniform mat4 model;
// Input vertex data, different for all executions of this shader.
//refers to the buffer we use to feed the vertexPosition_modelspace attribute. 
//Each vertex can have numerous attributes : A position, one or several colours, one or several texture coordinates, lots of other things. 
// OpenGL doesn’t know what a colour is : it just sees a vec3. So we have to tell him which buffer corresponds to which input. 
//We do that by setting the layout to the same value as the first parameter to glVertexAttribPointer. 


layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location =1) in vec3 RGB; 
layout(location =2) in vec2 texcord; 
out vec2 texout; 
layout(location = 3) in vec2 texcord2; 
layout(location =4 ) in vec3 Normals; 

out vec2 texout2; 
//out vec3 Color; // 3shan a7oto f fregmant

//in: means that this is some input data
//vertexPosition_modelspace: could be anything else. It will contain the position of the vertex for each run of the vertex shader.
out vec3 position;
 out vec3 normals;
void main(){

	//gl_Position is one of the few built-in variables : you have to assign some value to it. 
	//Everything else is optional; we’ll see what “everything else” means later.
	texout = texcord;
	normals=Normals;
	//texout2 = texcord2;  
   // gl_Position.xyz = vertexPosition_modelspace;
   // gl_Position.w = 1.0; //we will know the 4th coordinates in the next lab (math introduction)
	//Color=RGB;
	 position=vertexPosition_modelspace;
	gl_Position = MVP * vec4(vertexPosition_modelspace,1);
	


}


